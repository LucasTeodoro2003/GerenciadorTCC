// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  password  String
  emailVerified     DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
    verificationTokens VerificationToken[]
//  posts Post[]

}

//model Post {
//  id        Int     @id @default(autoincrement())
//  title     String
//  content   String?
//  published Boolean @default(false)
//  authorId  Int
//  author    User    @relation(fields: [authorId], references: [id])
//}


// model User {
//   id                Int                 @id @default(autoincrement())
//   email             String              @unique
//   password          String
//   emailVerified     DateTime?
//   createdAt         DateTime            @default(now())
//   updatedAt         DateTime            @updatedAt
//   sessions          Session[]
//   accounts          Account[]
//   verificationTokens VerificationToken[]
// }

// model Session {
//   id           String   @id @default(cuid())
//   userId       Int
//   user         User     @relation(fields: [userId], references: [id])
//   expires      DateTime
// }

// model Account {
//   id                   String   @id @default(cuid())
//   userId               Int
//   user                 User     @relation(fields: [userId], references: [id])
//   provider             String
//   providerAccountId    String
// }

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}