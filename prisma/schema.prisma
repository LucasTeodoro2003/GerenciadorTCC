generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Enterprise {
  id String @id @default(cuid())
  name String
  image String
  users User[]
  services Services[]
  serviceVehicle ServiceVehicle[] 
  vehicle Vehicle[]
  products Products[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  enterpriseId  String?
  password      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  accounts      Account[]
  sessions      Session[]
  vehicle       Vehicle[]
  expense       Expense[]
  revenue       Revenue[]
  addresses     Address[]
  permission    Int       @default(3)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enterprise Enterprise? @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
}

model Address {
  id          String    @id @default(cuid())
  street      String
  number      String
  complement  String?
  district    String
  city        String
  state       String
  postalCode  String
  userId      String
  isPrimary   Boolean   @default(false)


  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Expense {
  id            String    @id @default(cuid())
  userId        String
  description   String
  amount        Float
  date          String
  category      String
  paymentMethod String?
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Revenue {
  id          String   @id @default(cuid())
  userId      String
  description String?
  amount      String
  date        DateTime
  category    String?
  source      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id             String           @id @default(cuid())
  userId         String
  color          String?
  type           String
  model          String?
  plate          String
  yearCar        String?
  serviceVehicle ServiceVehicle[]
  enterpriseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  enterprise Enterprise? @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
}

model Services {
  id             String                 @id @default(cuid())
  price          String
  description    String?
  serviceVehicle ServiceVehicleService[]
  enterpriseId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  enterprise Enterprise? @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
}

model ServiceVehicle {
  id         String                 @id @default(cuid())
  vehicleId  String
  dateTime   DateTime?
  totalValue String
  discounts  String?
  addValue   String?
  services   ServiceVehicleService[]
  enterpriseId String?

  vehicle    Vehicle                @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  obs        String?

  enterprise Enterprise? @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
}

model ServiceVehicleService {
  id               String        @id @default(cuid())
  serviceVehicle   ServiceVehicle @relation(fields: [serviceVehicleId], references: [id], onDelete: Cascade)
  serviceVehicleId String
  service          Services       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId        String
  finished         Boolean              @default(false)

  @@unique([serviceVehicleId, serviceId])
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
}

model Products {
  id          String  @id @default(cuid())
  price       String
  description String
  amount      String
  minAmout    String?
  enterpriseId String?
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  enterprise Enterprise? @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
